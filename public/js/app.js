!function e(t,n,r){function o(i,s){if(!n[i]){if(!t[i]){var u="function"==typeof require&&require;if(!s&&u)return u(i,!0);if(a)return a(i,!0);var c=new Error("Cannot find module '"+i+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[i]={exports:{}};t[i][0].call(l.exports,function(e){var n=t[i][1][e];return o(n||e)},l,l.exports,e,t,n,r)}return n[i].exports}for(var a="function"==typeof require&&require,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./SubjectObserver"),i=(r=a)&&r.__esModule?r:{default:r};var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.total=0,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,[{key:"setTotal",value:function(e){this.total=e}},{key:"setObservers",value:function(e){e.forEach(function(e){e.notifies.forEach(function(t){t.observers.forEach(function(n){e.instance.addObserver(t.name,n.instance,n.callback)})})})}},{key:"setEventHandlers",value:function(e){var t=this;document.getElementById(this.appId).addEventListener("click",function(n){var r=n||window.event,o=r.target||r.srcElement;if("button"!==o.tagName.toLowerCase())return!1;if(o.hasAttribute("data-download")){o.classList.toggle(t.loadingClass);var a=[].slice.call(document.getElementById(t.itemsId).children).length;t.total>a&&setTimeout(function(){t.notify("showMore",e.restore()),o.classList.toggle(t.loadingClass),a+t.perRow>=t.total&&o.setAttribute("disabled","disabled")},500)}o.hasAttribute("data-delete")&&(o.classList.toggle(t.loadingClass),setTimeout(function(){t.notify("removeElem",o.getAttribute("data-delete")),o.classList.toggle(t.loadingClass),o.parentNode.parentNode.parentNode.parentNode.removeChild(o.parentNode.parentNode.parentNode),document.getElementById(t.appId).lastElementChild.removeAttribute("disabled")},500))})}}]),t}();n.default=s},{"./SubjectObserver":6}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=e("./SubjectObserver"),a=(r=o)&&r.__esModule?r:{default:r};var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.url="http://81.177.101.143:30080/test.json",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),t}();n.default=i},{"./SubjectObserver":6}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./LoadManager"),i=(r=a)&&r.__esModule?r:{default:r};var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.url="http://www.whateverorigin.org/get?url=http://81.177.101.143:30080/test.json",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,[{key:"load",value:function(){var e=this;return new Promise(function(t,n){var r="jsonp_callback_"+Math.round(1e5*Math.random());window[r]=function(e){delete window[r],document.body.removeChild(o),t(e)};var o=document.createElement("script");o.src=e.url+(~e.url.indexOf("?")?"&":"?")+"callback="+r,document.body.appendChild(o),o.onerror=function(e){n(e)}})}}]),t}();n.default=s},{"./LoadManager":2}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.list={}}return r(e,[{key:"add",value:function(e,t,n){Array.isArray(this.list[e])||(this.list[e]=[]),this.list[e].push({instance:t,callback:n})}}]),e}();n.default=o},{}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./SubjectObserver"),i=(r=a)&&r.__esModule?r:{default:r};var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.name="rostelecom",n.data=null,n.type="sessionStorage",n.sortProp="age",n.shownIds=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,[{key:"totalNum",value:function(){return this.data?this.total=this.data.length:this.total=JSON.parse(window[this.type].getItem(this.name)).length}},{key:"removeItemId",value:function(e){~this.shownIds.indexOf(e)&&this.shownIds.splice(this.shownIds.indexOf(e),1)}},{key:"isAvailable",value:function(){try{var e=window[this.type],t="__storage_test__";return e.setItem(t,t),e.removeItem(t),!0}catch(e){return!1}}},{key:"isEmpty",value:function(){return!this.isAvailable()||!window[this.type].getItem(this.name)}},{key:"save",value:function(e){if(!e)return!1;if(!this.isAvailable())return this.data=e,!1;try{return window[this.type].setItem(this.name,JSON.stringify(e)),this.name}catch(t){return this.data=e,!1}}},{key:"sort",value:function(e){var t=this;return e.slice(0).sort(function(e,n){return e[t.sortProp]>n[t.sortProp]?1:e[t.sortProp]<n[t.sortProp]?-1:0})}},{key:"paginate",value:function(e){var t=this,n=[],r=0;return e.every(function(e){return r!==t.perRow&&t.shownIds.length!==t.totalNum()&&(~t.shownIds.indexOf(e.id)||(n.push(e),t.shownIds.push(e.id),r++),!0)}),n}},{key:"restore",value:function(){return this.data?this.paginate(this.sort(this.data)):this.paginate(this.sort(JSON.parse(window[this.type].getItem(this.name))))}}]),t}();n.default=s},{"./SubjectObserver":6}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.observers=t,this.appId="container",this.itemsId="items",this.loadingClass="loading",this.perRow=4}return r(e,[{key:"addObserver",value:function(e,t,n){this.observers.add(e,t,n)}},{key:"notify",value:function(e,t){this.observers.list[e].forEach(function(e){return e.instance.update(e.callback,t)})}},{key:"update",value:function(e,t){e.call(this,t)}}]),e}();n.default=o},{}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./SubjectObserver"),i=(r=a)&&r.__esModule?r:{default:r};var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,[{key:"ready",value:function(){return new Promise(function(e,t){"interactive"!==document.readyState&&"complete"!==document.readyState||e(document.readyState),document.onreadystatechange=function(){~["interactive","complete"].indexOf(document.readyState)&&(e(document.readyState),document.onreadystatechange=null)}})}},{key:"renderView",value:function(e){var t=document.getElementById(this.appId),n='<div id="'+this.itemsId+'">'+this.templateItems(e)+'</div>\n                <button data-download><img src="spinner.gif">download</button>';t.innerHTML=n}},{key:"renderItems",value:function(e){document.getElementById(this.itemsId).insertAdjacentHTML("afterbegin",this.templateItems(e))}},{key:"templateItems",value:function(e){var t=this,n="";return e.forEach(function(e){n+=t.templateItem(e)}),n}},{key:"templateItem",value:function(e){return this.shown++,'<div class="item">\n              <img src="spinner.gif" class="no-image"/>\n              <div class="flex">\n                <div class="content front"><span>'+e.name+'</span></div>\n                <div class="content back">\n                  <span>'+e.name+"</span>\n                  <span>"+e.text+'</span>\n                  <button data-delete="'+e.id+'"><img src="spinner.gif">delete</button>\n                </div>\n              </div>\n            </div>'}}]),t}();n.default=s},{"./SubjectObserver":6}],8:[function(e,t,n){"use strict";var r=e("./config"),o=r.storageManager.isEmpty()?r.loadManager.load():Promise.resolve(!1),a=r.viewManager.ready();Promise.all([o,a]).then(function(e){r.loadManager.notify("dataLoaded",e[0].contents),r.loadManager.notify("totalNum",r.storageManager.totalNum()),r.eventManager.setEventHandlers(r.storageManager),r.eventManager.notify("handlersReady",r.storageManager.restore())},function(e){r.loadManager.notify("test",e)})},{"./config":9}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.eventManager=n.storageManager=n.viewManager=n.loadManager=void 0;var r=u(e("./ObserverList")),o=u(e("./ViewManager")),a=u(e("./EventManager")),i=u(e("./LoadManagerProxy")),s=u(e("./StorageManager"));function u(e){return e&&e.__esModule?e:{default:e}}var c=new i.default(new r.default),l=new o.default(new r.default),f=new s.default(new r.default),d=new a.default(new r.default),p=[{instance:c,notifies:[{name:"dataLoaded",observers:[{instance:f,callback:f.save}]},{name:"totalNum",observers:[{instance:d,callback:d.setTotal}]}]},{instance:l,notifies:[{name:"domReady",observers:[{instance:d,callback:d.setHandlers}]}]},{instance:d,notifies:[{name:"handlersReady",observers:[{instance:l,callback:l.renderView}]},{name:"showMore",observers:[{instance:l,callback:l.renderItems}]},{name:"removeElem",observers:[{instance:f,callback:f.removeItemId}]}]}];d.setObservers(p),n.loadManager=c,n.viewManager=l,n.storageManager=f,n.eventManager=d},{"./EventManager":1,"./LoadManagerProxy":3,"./ObserverList":4,"./StorageManager":5,"./ViewManager":7}]},{},[8]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
