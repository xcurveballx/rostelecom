!function e(t,n,r){function o(i,u){if(!n[i]){if(!t[i]){var c="function"==typeof require&&require;if(!u&&c)return c(i,!0);if(a)return a(i,!0);var f=new Error("Cannot find module '"+i+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[i]={exports:{}};t[i][0].call(l.exports,function(e){var n=t[i][1][e];return o(n||e)},l,l.exports,e,t,n,r)}return n[i].exports}for(var a="function"==typeof require&&require,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.observers=t,this.url="http://81.177.101.143:30080/test.json"}return r(e,[{key:"addObserver",value:function(e,t,n){this.observers.add(e,t,n)}},{key:"notify",value:function(e,t){this.observers.list[e].forEach(function(e){return e.instance.update(e.callback,t)})}}]),e}();n.default=o},{}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./LoadManager"),i=(r=a)&&r.__esModule?r:{default:r};var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.url="http://www.whateverorigin.org/get?url=http://81.177.101.143:30080/test.json",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,[{key:"load",value:function(){var e=this;return new Promise(function(t,n){var r="jsonp_callback_"+Math.round(1e5*Math.random());window[r]=function(e){delete window[r],document.body.removeChild(o),t(e)};var o=document.createElement("script");o.src=e.url+(~e.url.indexOf("?")?"&":"?")+"callback="+r,document.body.appendChild(o),o.onerror=function(e){n(e)}})}}]),t}();n.default=u},{"./LoadManager":1}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.list={}}return r(e,[{key:"add",value:function(e,t,n){Array.isArray(this.list[e])||(this.list[e]=[]),this.list[e].push({instance:t,callback:n})}}]),e}();n.default=o},{}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.storage=t}return r(e,[{key:"update",value:function(e,t){e(t)}},{key:"doSomething",value:function(e){console.log(e)}}]),e}();n.default=o},{}],5:[function(e,t,n){"use strict";var r=i(e("./ObserverList")),o=i(e("./LoadManagerProxy")),a=i(e("./StorageManager"));function i(e){return e&&e.__esModule?e:{default:e}}var u=new o.default(new r.default),c=new a.default("rostelecom");[{instance:u,notifies:[{name:"test",observers:[{instance:c,callback:c.doSomething}]}]}].forEach(function(e){e.notifies.forEach(function(t){t.observers.forEach(function(n){e.instance.addObserver(t.name,n.instance,n.callback)})})});var f=u.load();Promise.all([f]).then(function(e){return u.notify("test",e)},function(e){return u.notify("test",e)})},{"./LoadManagerProxy":2,"./ObserverList":3,"./StorageManager":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
